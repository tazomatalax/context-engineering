name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create as prerelease'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for changelog generation
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Install dependencies
        run: |
          cd installer
          npm ci
          
      - name: Bump version and create tag
        id: version
        run: |
          cd installer
          OLD_VERSION=$(node -p "require('./package.json').version")
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit the version bump
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          
          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
          
      - name: Generate detailed changelog
        id: changelog
        run: |
          cd installer
          # Get commits since last tag (excluding the version bump commit)
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" --no-merges HEAD~1)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD~1 --oneline --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Generate changelog with categories
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed in v${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          if [ -n "$COMMITS" ]; then
            # Categorize commits
            echo "$COMMITS" | grep -E "^- (feat|feature)" | head -10 > /tmp/features || true
            echo "$COMMITS" | grep -E "^- (fix|bug)" | head -10 > /tmp/fixes || true
            echo "$COMMITS" | grep -E "^- (docs|doc)" | head -10 > /tmp/docs || true
            echo "$COMMITS" | grep -E "^- (chore|refactor|style|test)" | head -10 > /tmp/chores || true
            echo "$COMMITS" | grep -vE "^- (feat|feature|fix|bug|docs|doc|chore|refactor|style|test)" | head -10 > /tmp/other || true
            
            if [ -s /tmp/features ]; then
              echo "### ✨ New Features" >> $GITHUB_OUTPUT
              cat /tmp/features >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            fi
            
            if [ -s /tmp/fixes ]; then
              echo "### 🐛 Bug Fixes" >> $GITHUB_OUTPUT
              cat /tmp/fixes >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            fi
            
            if [ -s /tmp/docs ]; then
              echo "### 📚 Documentation" >> $GITHUB_OUTPUT
              cat /tmp/docs >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            fi
            
            if [ -s /tmp/other ]; then
              echo "### 🔧 Other Changes" >> $GITHUB_OUTPUT
              cat /tmp/other >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            fi
            
            if [ -s /tmp/chores ]; then
              echo "### 🏠 Maintenance" >> $GITHUB_OUTPUT
              cat /tmp/chores >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            fi
          else
            echo "### 🔧 Updates" >> $GITHUB_OUTPUT
            echo "- Package updates and improvements" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          echo "---" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.old_version }}...v${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**NPM Package**: [context-engineering-installer@${{ steps.version.outputs.new_version }}](https://npmjs.com/package/context-engineering-installer)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Publish to NPM
        run: |
          cd installer
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        run: |
          PRERELEASE_FLAG=""
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          gh release create "${{ steps.version.outputs.tag_name }}" \
            --title "Release ${{ steps.version.outputs.tag_name }}" \
            --notes "${{ steps.changelog.outputs.changelog }}" \
            ${PRERELEASE_FLAG} \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}