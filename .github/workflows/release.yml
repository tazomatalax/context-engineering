name: "[DEPRECATED] Manual Release Workflow

# This workflow is deprecated. 
# Use manual GitHub releases instead - they will automatically trigger npm publishing.
# 
# New workflow:
# 1. Create release manually in GitHub with version tag (e.g., v1.5.0)
# 2. NPM publish happens automatically via the 'Publish to NPM' workflow

name: "[DEPRECATED] Release Context Engineering Toolkit"

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch   # Bug fixes, small improvements
          - minor   # New features, workflow enhancements  
          - major   # Breaking changes, major redesigns
      release_description:
        description: 'Brief description of main changes'
        required: true
        default: 'Toolkit improvements and enhancements'
        type: string
      prerelease:
        description: 'Create as prerelease (beta)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # Required to create releases, tags, and push commits
  packages: read   # Required to read packages

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for changelog generation
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Install dependencies
        run: |
          cd installer
          npm ci
          
      - name: Bump version and create tag
        id: version
        run: |
          cd installer
          OLD_VERSION=$(node -p "require('./package.json').version")
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit the version bump
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          
          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
          
      - name: Generate toolkit-focused changelog
        id: changelog
        run: |
          # Get commits since last tag (excluding the version bump commit)
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"%s (%h)" --no-merges HEAD~1)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD~1 --oneline --pretty=format:"%s (%h)" --no-merges)
          fi
          
          # Get toolkit-specific changes
          TOOLKIT_CHANGES=$(git log ${LAST_TAG}..HEAD~1 --oneline --pretty=format:"%s (%h)" --no-merges -- installer/toolkit/ examples/ || echo "")
          
          # Generate toolkit-focused changelog
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "# 🚀 Context Engineering Toolkit v${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 📋 What's New" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "${{ github.event.inputs.release_description }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          if [ -n "$TOOLKIT_CHANGES" ]; then
            echo "## 🛠️ Toolkit Changes" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "$TOOLKIT_CHANGES" | while read line; do
              if [[ "$line" =~ ^.*feat.*$ ]] || [[ "$line" =~ ^.*add.*$ ]]; then
                echo "- ✨ $line" >> $GITHUB_OUTPUT
              elif [[ "$line" =~ ^.*fix.*$ ]] || [[ "$line" =~ ^.*bug.*$ ]]; then
                echo "- 🐛 $line" >> $GITHUB_OUTPUT
              elif [[ "$line" =~ ^.*docs.*$ ]] || [[ "$line" =~ ^.*doc.*$ ]]; then
                echo "- 📚 $line" >> $GITHUB_OUTPUT
              elif [[ "$line" =~ ^.*command.*$ ]] || [[ "$line" =~ ^.*workflow.*$ ]]; then
                echo "- ⚡ $line" >> $GITHUB_OUTPUT
              else
                echo "- 🔧 $line" >> $GITHUB_OUTPUT
              fi
            done
            echo "" >> $GITHUB_OUTPUT
          fi
          
          echo "## 📦 Installation" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "# Universal installer (recommended)" >> $GITHUB_OUTPUT
          echo "curl -fsSL https://raw.githubusercontent.com/tazomatalax/context-engineering/main/install.sh | bash" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "# Or via NPX" >> $GITHUB_OUTPUT
          echo "npx context-engineering-installer@${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.old_version }}...v${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "**NPM Package**: [context-engineering-installer@${{ steps.version.outputs.new_version }}](https://npmjs.com/package/context-engineering-installer)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Publish to NPM
        run: |
          cd installer
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        run: |
          PRERELEASE_FLAG=""
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          gh release create "${{ steps.version.outputs.tag_name }}" \
            --title "Release ${{ steps.version.outputs.tag_name }}" \
            --notes "${{ steps.changelog.outputs.changelog }}" \
            ${PRERELEASE_FLAG} \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}