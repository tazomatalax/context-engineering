name: Publish to NPM

on:
  push:
    branches: [ main ]
    paths: [ 'installer/**' ]  # Only trigger when installer changes

# Prevent duplicate runs from npm version workflow
concurrency:
  group: npm-publish
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: |
          cd installer
          npm ci
          
      - name: Check if version changed
        id: version-check
        run: |
          cd installer
          CURRENT_VERSION=$(npm view context-engineering-installer version || echo "0.0.0")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "package=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed: $CURRENT_VERSION -> $PACKAGE_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $PACKAGE_VERSION"
          fi
          
      - name: Publish to NPM
        if: steps.version-check.outputs.changed == 'true'
        run: |
          cd installer
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Generate changelog
        if: steps.version-check.outputs.changed == 'true'
        id: changelog
        run: |
          cd installer
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in v${{ steps.version-check.outputs.package }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          if [ -n "$COMMITS" ]; then
            echo "$COMMITS" >> $GITHUB_OUTPUT
          else
            echo "- Package updates and improvements" >> $GITHUB_OUTPUT
          fi
          echo "" >> $GITHUB_OUTPUT
          echo "**NPM Package:** [context-engineering-installer@${{ steps.version-check.outputs.package }}](https://npmjs.com/package/context-engineering-installer)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        if: steps.version-check.outputs.changed == 'true'
        run: |
          gh release create "v${{ steps.version-check.outputs.package }}" \
            --title "Release v${{ steps.version-check.outputs.package }}" \
            --notes "${{ steps.changelog.outputs.changelog }}" \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}